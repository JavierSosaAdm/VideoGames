{"ast":null,"code":"import { GET_BY_NAME, GET_ALL_VIDEOGAMES, GET_BY_ID, ADD_GAME, GET_GENRE, FILTER_GENRES } from './ActionsType';\nlet initialState = {\n  allGames: [],\n  name: [],\n  detail: [],\n  copyAllGames: [],\n  allGenres: []\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_VIDEOGAMES:\n      return {\n        ...state,\n        allGames: action.payload,\n        // el action.payload es la respuesta que me dio la action \"getGames\"\n        copyAllGames: action.payload\n      };\n    case GET_BY_NAME:\n      return {\n        ...state,\n        allGames: action.payload\n      };\n    case GET_BY_ID:\n      return {\n        ...state,\n        detail: action.payload\n      };\n    case ADD_GAME:\n      return {\n        ...state,\n        allGames: action.payload,\n        copyAllGames: action.payload\n      };\n    case GET_GENRE:\n      return {\n        ...state,\n        allGenres: action.payload\n      };\n    case FILTER_GENRES:\n      const AllgamesCopy = [...state.allGames];\n      let genreFilter = AllgamesCopy.filter(gen => gen.genres.name.includes(action.payload));\n      if (genreFilter.length === 0 && action.payload !== 'allGenres') {\n        alert('No se encuentran juegos para el genero solicitado');\n        return {\n          ...state,\n          ...state.genreFilter\n        };\n      }\n\n      // const genreFilter = state.allGames.filter((game) => {\n      //     game.genres.map((genre) => {\n\n      //         return genre.name === action.payload\n      //     })\n\n      // } \n      // )\n      return {\n        ...state,\n        genreFilter: genreFilter\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_BY_NAME","GET_ALL_VIDEOGAMES","GET_BY_ID","ADD_GAME","GET_GENRE","FILTER_GENRES","initialState","allGames","name","detail","copyAllGames","allGenres","rootReducer","state","action","type","payload","AllgamesCopy","genreFilter","filter","gen","genres","includes","length","alert"],"sources":["C:/Users/javie/Desktop/PI-Videogames-main/client/src/Redux/Reducer.js"],"sourcesContent":["import { GET_BY_NAME, GET_ALL_VIDEOGAMES, GET_BY_ID, ADD_GAME, GET_GENRE, FILTER_GENRES } from './ActionsType';\r\n\r\nlet initialState = {allGames: [], name: [], detail:[], copyAllGames: [], allGenres:[]}\r\nconst rootReducer = (state= initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_ALL_VIDEOGAMES:\r\n            return {\r\n                ...state,\r\n                allGames: action.payload, // el action.payload es la respuesta que me dio la action \"getGames\"\r\n                copyAllGames: action.payload\r\n            };\r\n        \r\n        case GET_BY_NAME:\r\n            \r\n            return {\r\n                ...state,\r\n                allGames: action.payload\r\n            };\r\n            \r\n        case GET_BY_ID:\r\n            return {\r\n                ...state,\r\n                detail: action.payload\r\n            };\r\n        case ADD_GAME:\r\n            return {\r\n                ...state,\r\n                allGames: action.payload,\r\n                copyAllGames: action.payload\r\n            };\r\n        case GET_GENRE:\r\n            return {\r\n                ...state,\r\n                allGenres: action.payload\r\n            };\r\n        case FILTER_GENRES:\r\n            const AllgamesCopy = [...state.allGames]\r\n\r\n            let genreFilter = AllgamesCopy.filter(gen => gen.genres.name.includes(action.payload))\r\n\r\n            if (genreFilter.length === 0 && action.payload !== 'allGenres') {\r\n                alert('No se encuentran juegos para el genero solicitado')\r\n                return {...state, ...state.genreFilter}\r\n            }\r\n\r\n            // const genreFilter = state.allGames.filter((game) => {\r\n            //     game.genres.map((genre) => {\r\n                    \r\n            //         return genre.name === action.payload\r\n            //     })\r\n                \r\n            // } \r\n            // )\r\n            return {\r\n                ...state,\r\n                genreFilter: genreFilter\r\n            }\r\n    \r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\nexport default rootReducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,aAAa,QAAQ,eAAe;AAE9G,IAAIC,YAAY,GAAG;EAACC,QAAQ,EAAE,EAAE;EAAEC,IAAI,EAAE,EAAE;EAAEC,MAAM,EAAC,EAAE;EAAEC,YAAY,EAAE,EAAE;EAAEC,SAAS,EAAC;AAAE,CAAC;AACtF,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAEP,YAAY,EAAEQ,MAAM,KAAK;EACjD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKd,kBAAkB;MACnB,OAAO;QACH,GAAGY,KAAK;QACRN,QAAQ,EAAEO,MAAM,CAACE,OAAO;QAAE;QAC1BN,YAAY,EAAEI,MAAM,CAACE;MACzB,CAAC;IAEL,KAAKhB,WAAW;MAEZ,OAAO;QACH,GAAGa,KAAK;QACRN,QAAQ,EAAEO,MAAM,CAACE;MACrB,CAAC;IAEL,KAAKd,SAAS;MACV,OAAO;QACH,GAAGW,KAAK;QACRJ,MAAM,EAAEK,MAAM,CAACE;MACnB,CAAC;IACL,KAAKb,QAAQ;MACT,OAAO;QACH,GAAGU,KAAK;QACRN,QAAQ,EAAEO,MAAM,CAACE,OAAO;QACxBN,YAAY,EAAEI,MAAM,CAACE;MACzB,CAAC;IACL,KAAKZ,SAAS;MACV,OAAO;QACH,GAAGS,KAAK;QACRF,SAAS,EAAEG,MAAM,CAACE;MACtB,CAAC;IACL,KAAKX,aAAa;MACd,MAAMY,YAAY,GAAG,CAAC,GAAGJ,KAAK,CAACN,QAAQ,CAAC;MAExC,IAAIW,WAAW,GAAGD,YAAY,CAACE,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,MAAM,CAACb,IAAI,CAACc,QAAQ,CAACR,MAAM,CAACE,OAAO,CAAC,CAAC;MAEtF,IAAIE,WAAW,CAACK,MAAM,KAAK,CAAC,IAAIT,MAAM,CAACE,OAAO,KAAK,WAAW,EAAE;QAC5DQ,KAAK,CAAC,mDAAmD,CAAC;QAC1D,OAAO;UAAC,GAAGX,KAAK;UAAE,GAAGA,KAAK,CAACK;QAAW,CAAC;MAC3C;;MAEA;MACA;;MAEA;MACA;;MAEA;MACA;MACA,OAAO;QACH,GAAGL,KAAK;QACRK,WAAW,EAAEA;MACjB,CAAC;IAEL;MACI,OAAO;QAAC,GAAGL;MAAK,CAAC;EACzB;AACJ,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}